<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="_imgBox.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        /9j/4AAQSkZJRgABAQEAYABgAAD/4QBaRXhpZgAATU0AKgAAAAgABQMBAAUAAAABAAAASgMDAAEAAAAB
        AAAAAFEQAAEAAAABAQAAAFERAAQAAAABAAAOw1ESAAQAAAABAAAOwwAAAAAAAYagAACxj//bAEMAAgEB
        AgEBAgICAgICAgIDBQMDAwMDBgQEAwUHBgcHBwYHBwgJCwkICAoIBwcKDQoKCwwMDAwHCQ4PDQwOCwwM
        DP/bAEMBAgICAwMDBgMDBgwIBwgMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwM
        DAwMDAwMDAwMDP/AABEIAFQAZAMBIgACEQEDEQH/xAAfAAABBQEBAQEBAQAAAAAAAAAAAQIDBAUGBwgJ
        Cgv/xAC1EAACAQMDAgQDBQUEBAAAAX0BAgMABBEFEiExQQYTUWEHInEUMoGRoQgjQrHBFVLR8CQzYnKC
        CQoWFxgZGiUmJygpKjQ1Njc4OTpDREVGR0hJSlNUVVZXWFlaY2RlZmdoaWpzdHV2d3h5eoOEhYaHiImK
        kpOUlZaXmJmaoqOkpaanqKmqsrO0tba3uLm6wsPExcbHyMnK0tPU1dbX2Nna4eLj5OXm5+jp6vHy8/T1
        9vf4+fr/xAAfAQADAQEBAQEBAQEBAAAAAAAAAQIDBAUGBwgJCgv/xAC1EQACAQIEBAMEBwUEBAABAncA
        AQIDEQQFITEGEkFRB2FxEyIygQgUQpGhscEJIzNS8BVictEKFiQ04SXxFxgZGiYnKCkqNTY3ODk6Q0RF
        RkdISUpTVFVWV1hZWmNkZWZnaGlqc3R1dnd4eXqCg4SFhoeIiYqSk5SVlpeYmZqio6Slpqeoqaqys7S1
        tre4ubrCw8TFxsfIycrS09TV1tfY2dri4+Tl5ufo6ery8/T19vf4+fr/2gAMAwEAAhEDEQA/AP3sstSt
        9N0G0e5nht08lPmkcIPujua57xJ+0L4E8H2zTan4w8N2UacMZNQiGP1r5X/a2+C2lfEz9rrwRp3jTV9W
        PhnxD4enXS9Lt9Rms4ri+hEJbc0bKTiPeducHJPatTQf2L/hb4GdZNP8BeHVmj6yXFv9rkOO5aUsSaUb
        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
</value>
  </data>
</root>