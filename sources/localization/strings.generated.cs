
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using nvc.localization;
	
			
namespace nvc.controls {
	public partial class SaveSettingsFormStrings: LocalizedStringsBase<SaveSettingsFormStrings>{
		


		private const string s_Title = @"Saving changes...";
		private string m_Title=null;
		[XPath(@"/localized-strings/module[@name='SaveSettingsFormStrings' and @namespace='nvc.controls']/descendant::string[@name='Title']/@value")]
		public string Title {
			get { 
				if( m_Title == null){
					return s_Title;
				}
				return m_Title; 
			}
			set { 
				if( value != m_Title){
					m_Title = value;
					NotifyPropertyChanged("Title");
				}
			}  
		}
	


		private const string s_Text = @"Please wait until changes will be applied";
		private string m_Text=null;
		[XPath(@"/localized-strings/module[@name='SaveSettingsFormStrings' and @namespace='nvc.controls']/descendant::string[@name='Text']/@value")]
		public string Text {
			get { 
				if( m_Text == null){
					return s_Text;
				}
				return m_Text; 
			}
			set { 
				if( value != m_Text){
					m_Text = value;
					NotifyPropertyChanged("Text");
				}
			}  
		}
	


		private const string s_NeedToReboot = @"Device need to be rebooted. Please refresh devices list.";
		private string m_NeedToReboot=null;
		[XPath(@"/localized-strings/module[@name='SaveSettingsFormStrings' and @namespace='nvc.controls']/descendant::string[@name='NeedToReboot']/@value")]
		public string NeedToReboot {
			get { 
				if( m_NeedToReboot == null){
					return s_NeedToReboot;
				}
				return m_NeedToReboot; 
			}
			set { 
				if( value != m_NeedToReboot){
					m_NeedToReboot = value;
					NotifyPropertyChanged("NeedToReboot");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class DepthCalibrationStrings: LocalizedStringsBase<DepthCalibrationStrings>{
		


		private const string s_physHeightTitle = @"Height marker setup";
		private string m_physHeightTitle=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='physHeightTitle']/@value")]
		public string physHeightTitle {
			get { 
				if( m_physHeightTitle == null){
					return s_physHeightTitle;
				}
				return m_physHeightTitle; 
			}
			set { 
				if( value != m_physHeightTitle){
					m_physHeightTitle = value;
					NotifyPropertyChanged("physHeightTitle");
				}
			}  
		}
	


		private const string s_title = @"Depth calibration";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_focalLength = @"Focal length, mm";
		private string m_focalLength=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='focalLength']/@value")]
		public string focalLength {
			get { 
				if( m_focalLength == null){
					return s_focalLength;
				}
				return m_focalLength; 
			}
			set { 
				if( value != m_focalLength){
					m_focalLength = value;
					NotifyPropertyChanged("focalLength");
				}
			}  
		}
	


		private const string s_sensorPixel = @"Photosensor pixel size, m*";
		private string m_sensorPixel=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='sensorPixel']/@value")]
		public string sensorPixel {
			get { 
				if( m_sensorPixel == null){
					return s_sensorPixel;
				}
				return m_sensorPixel; 
			}
			set { 
				if( value != m_sensorPixel){
					m_sensorPixel = value;
					NotifyPropertyChanged("sensorPixel");
				}
			}  
		}
	


		private const string s_matrixFormat = @"Matrix format";
		private string m_matrixFormat=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='matrixFormat']/@value")]
		public string matrixFormat {
			get { 
				if( m_matrixFormat == null){
					return s_matrixFormat;
				}
				return m_matrixFormat; 
			}
			set { 
				if( value != m_matrixFormat){
					m_matrixFormat = value;
					NotifyPropertyChanged("matrixFormat");
				}
			}  
		}
	


		private const string s_save = @"Calibrate";
		private string m_save=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='save']/@value")]
		public string save {
			get { 
				if( m_save == null){
					return s_save;
				}
				return m_save; 
			}
			set { 
				if( value != m_save){
					m_save = value;
					NotifyPropertyChanged("save");
				}
			}  
		}
	


		private const string s_heightMarker = @"Height marker";
		private string m_heightMarker=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='heightMarker']/@value")]
		public string heightMarker {
			get { 
				if( m_heightMarker == null){
					return s_heightMarker;
				}
				return m_heightMarker; 
			}
			set { 
				if( value != m_heightMarker){
					m_heightMarker = value;
					NotifyPropertyChanged("heightMarker");
				}
			}  
		}
	


		private const string s_marker2D = @"2D-marker";
		private string m_marker2D=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='marker2D']/@value")]
		public string marker2D {
			get { 
				if( m_marker2D == null){
					return s_marker2D;
				}
				return m_marker2D; 
			}
			set { 
				if( value != m_marker2D){
					m_marker2D = value;
					NotifyPropertyChanged("marker2D");
				}
			}  
		}
	


		private const string s_unknow = @"I don't know";
		private string m_unknow=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='unknow']/@value")]
		public string unknow {
			get { 
				if( m_unknow == null){
					return s_unknow;
				}
				return m_unknow; 
			}
			set { 
				if( value != m_unknow){
					m_unknow = value;
					NotifyPropertyChanged("unknow");
				}
			}  
		}
	


		private const string s_physHeight = @"Real perspector height, cm";
		private string m_physHeight=null;
		[XPath(@"/localized-strings/module[@name='DepthCalibrationStrings' and @namespace='nvc.controls']/descendant::string[@name='physHeight']/@value")]
		public string physHeight {
			get { 
				if( m_physHeight == null){
					return s_physHeight;
				}
				return m_physHeight; 
			}
			set { 
				if( value != m_physHeight){
					m_physHeight = value;
					NotifyPropertyChanged("physHeight");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class RuleEngineStrings: LocalizedStringsBase<RuleEngineStrings>{
		


		private const string s_title = @"Rule engine";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_btnAdd = @"Add";
		private string m_btnAdd=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='btnAdd']/@value")]
		public string btnAdd {
			get { 
				if( m_btnAdd == null){
					return s_btnAdd;
				}
				return m_btnAdd; 
			}
			set { 
				if( value != m_btnAdd){
					m_btnAdd = value;
					NotifyPropertyChanged("btnAdd");
				}
			}  
		}
	


		private const string s_btnRemove = @"Remove";
		private string m_btnRemove=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='btnRemove']/@value")]
		public string btnRemove {
			get { 
				if( m_btnRemove == null){
					return s_btnRemove;
				}
				return m_btnRemove; 
			}
			set { 
				if( value != m_btnRemove){
					m_btnRemove = value;
					NotifyPropertyChanged("btnRemove");
				}
			}  
		}
	


		private const string s_name = @"Name";
		private string m_name=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='name']/@value")]
		public string name {
			get { 
				if( m_name == null){
					return s_name;
				}
				return m_name; 
			}
			set { 
				if( value != m_name){
					m_name = value;
					NotifyPropertyChanged("name");
				}
			}  
		}
	


		private const string s_groupRule = @"Generate alarm when:";
		private string m_groupRule=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='groupRule']/@value")]
		public string groupRule {
			get { 
				if( m_groupRule == null){
					return s_groupRule;
				}
				return m_groupRule; 
			}
			set { 
				if( value != m_groupRule){
					m_groupRule = value;
					NotifyPropertyChanged("groupRule");
				}
			}  
		}
	


		private const string s_groupAction = @"Upon alarm:";
		private string m_groupAction=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='groupAction']/@value")]
		public string groupAction {
			get { 
				if( m_groupAction == null){
					return s_groupAction;
				}
				return m_groupAction; 
			}
			set { 
				if( value != m_groupAction){
					m_groupAction = value;
					NotifyPropertyChanged("groupAction");
				}
			}  
		}
	


		private const string s_moving = @"Moving";
		private string m_moving=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='moving']/@value")]
		public string moving {
			get { 
				if( m_moving == null){
					return s_moving;
				}
				return m_moving; 
			}
			set { 
				if( value != m_moving){
					m_moving = value;
					NotifyPropertyChanged("moving");
				}
			}  
		}
	


		private const string s_meters = @"m";
		private string m_meters=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='meters']/@value")]
		public string meters {
			get { 
				if( m_meters == null){
					return s_meters;
				}
				return m_meters; 
			}
			set { 
				if( value != m_meters){
					m_meters = value;
					NotifyPropertyChanged("meters");
				}
			}  
		}
	


		private const string s_movingInDirections = @"in directions:";
		private string m_movingInDirections=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='movingInDirections']/@value")]
		public string movingInDirections {
			get { 
				if( m_movingInDirections == null){
					return s_movingInDirections;
				}
				return m_movingInDirections; 
			}
			set { 
				if( value != m_movingInDirections){
					m_movingInDirections = value;
					NotifyPropertyChanged("movingInDirections");
				}
			}  
		}
	


		private const string s_loitering = @"Loitering";
		private string m_loitering=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='loitering']/@value")]
		public string loitering {
			get { 
				if( m_loitering == null){
					return s_loitering;
				}
				return m_loitering; 
			}
			set { 
				if( value != m_loitering){
					m_loitering = value;
					NotifyPropertyChanged("loitering");
				}
			}  
		}
	


		private const string s_seconds = @"s";
		private string m_seconds=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='seconds']/@value")]
		public string seconds {
			get { 
				if( m_seconds == null){
					return s_seconds;
				}
				return m_seconds; 
			}
			set { 
				if( value != m_seconds){
					m_seconds = value;
					NotifyPropertyChanged("seconds");
				}
			}  
		}
	


		private const string s_within = @"within";
		private string m_within=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='within']/@value")]
		public string within {
			get { 
				if( m_within == null){
					return s_within;
				}
				return m_within; 
			}
			set { 
				if( value != m_within){
					m_within = value;
					NotifyPropertyChanged("within");
				}
			}  
		}
	


		private const string s_running = @"Running faster then";
		private string m_running=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='running']/@value")]
		public string running {
			get { 
				if( m_running == null){
					return s_running;
				}
				return m_running; 
			}
			set { 
				if( value != m_running){
					m_running = value;
					NotifyPropertyChanged("running");
				}
			}  
		}
	


		private const string s_speed = @"m/s";
		private string m_speed=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='speed']/@value")]
		public string speed {
			get { 
				if( m_speed == null){
					return s_speed;
				}
				return m_speed; 
			}
			set { 
				if( value != m_speed){
					m_speed = value;
					NotifyPropertyChanged("speed");
				}
			}  
		}
	


		private const string s_abandoning = @"Abandoning item";
		private string m_abandoning=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='abandoning']/@value")]
		public string abandoning {
			get { 
				if( m_abandoning == null){
					return s_abandoning;
				}
				return m_abandoning; 
			}
			set { 
				if( value != m_abandoning){
					m_abandoning = value;
					NotifyPropertyChanged("abandoning");
				}
			}  
		}
	


		private const string s_sendOnvif = @"Send ONVIF message";
		private string m_sendOnvif=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='sendOnvif']/@value")]
		public string sendOnvif {
			get { 
				if( m_sendOnvif == null){
					return s_sendOnvif;
				}
				return m_sendOnvif; 
			}
			set { 
				if( value != m_sendOnvif){
					m_sendOnvif = value;
					NotifyPropertyChanged("sendOnvif");
				}
			}  
		}
	


		private const string s_setFramerate = @"Set Framerate to";
		private string m_setFramerate=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='setFramerate']/@value")]
		public string setFramerate {
			get { 
				if( m_setFramerate == null){
					return s_setFramerate;
				}
				return m_setFramerate; 
			}
			set { 
				if( value != m_setFramerate){
					m_setFramerate = value;
					NotifyPropertyChanged("setFramerate");
				}
			}  
		}
	


		private const string s_fps = @"fps";
		private string m_fps=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='fps']/@value")]
		public string fps {
			get { 
				if( m_fps == null){
					return s_fps;
				}
				return m_fps; 
			}
			set { 
				if( value != m_fps){
					m_fps = value;
					NotifyPropertyChanged("fps");
				}
			}  
		}
	


		private const string s_turnOnRelay = @"Turn on";
		private string m_turnOnRelay=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='turnOnRelay']/@value")]
		public string turnOnRelay {
			get { 
				if( m_turnOnRelay == null){
					return s_turnOnRelay;
				}
				return m_turnOnRelay; 
			}
			set { 
				if( value != m_turnOnRelay){
					m_turnOnRelay = value;
					NotifyPropertyChanged("turnOnRelay");
				}
			}  
		}
	


		private const string s_turnOnAnalog = @"Turn on analogue output";
		private string m_turnOnAnalog=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='turnOnAnalog']/@value")]
		public string turnOnAnalog {
			get { 
				if( m_turnOnAnalog == null){
					return s_turnOnAnalog;
				}
				return m_turnOnAnalog; 
			}
			set { 
				if( value != m_turnOnAnalog){
					m_turnOnAnalog = value;
					NotifyPropertyChanged("turnOnAnalog");
				}
			}  
		}
	


		private const string s_record = @"Record to local or network drive";
		private string m_record=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='record']/@value")]
		public string record {
			get { 
				if( m_record == null){
					return s_record;
				}
				return m_record; 
			}
			set { 
				if( value != m_record){
					m_record = value;
					NotifyPropertyChanged("record");
				}
			}  
		}
	


		private const string s_ptz = @"Target PTZ-camera";
		private string m_ptz=null;
		[XPath(@"/localized-strings/module[@name='RuleEngineStrings' and @namespace='nvc.controls']/descendant::string[@name='ptz']/@value")]
		public string ptz {
			get { 
				if( m_ptz == null){
					return s_ptz;
				}
				return m_ptz; 
			}
			set { 
				if( value != m_ptz){
					m_ptz = value;
					NotifyPropertyChanged("ptz");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class EventsStrings: LocalizedStringsBase<EventsStrings>{
		


		private const string s_title = @"Events";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='EventsStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_ruleID = @"Rule ID";
		private string m_ruleID=null;
		[XPath(@"/localized-strings/module[@name='EventsStrings' and @namespace='nvc.controls']/descendant::string[@name='ruleID']/@value")]
		public string ruleID {
			get { 
				if( m_ruleID == null){
					return s_ruleID;
				}
				return m_ruleID; 
			}
			set { 
				if( value != m_ruleID){
					m_ruleID = value;
					NotifyPropertyChanged("ruleID");
				}
			}  
		}
	


		private const string s_dateTime = @"Date/Time";
		private string m_dateTime=null;
		[XPath(@"/localized-strings/module[@name='EventsStrings' and @namespace='nvc.controls']/descendant::string[@name='dateTime']/@value")]
		public string dateTime {
			get { 
				if( m_dateTime == null){
					return s_dateTime;
				}
				return m_dateTime; 
			}
			set { 
				if( value != m_dateTime){
					m_dateTime = value;
					NotifyPropertyChanged("dateTime");
				}
			}  
		}
	


		private const string s_type = @"Type";
		private string m_type=null;
		[XPath(@"/localized-strings/module[@name='EventsStrings' and @namespace='nvc.controls']/descendant::string[@name='type']/@value")]
		public string type {
			get { 
				if( m_type == null){
					return s_type;
				}
				return m_type; 
			}
			set { 
				if( value != m_type){
					m_type = value;
					NotifyPropertyChanged("type");
				}
			}  
		}
	


		private const string s_details = @"Details";
		private string m_details=null;
		[XPath(@"/localized-strings/module[@name='EventsStrings' and @namespace='nvc.controls']/descendant::string[@name='details']/@value")]
		public string details {
			get { 
				if( m_details == null){
					return s_details;
				}
				return m_details; 
			}
			set { 
				if( value != m_details){
					m_details = value;
					NotifyPropertyChanged("details");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class ExceptionStrings: LocalizedStringsBase<ExceptionStrings>{
		


		private const string s_sExceptionWSDiscoveryTitle = @"WSDiscovery error";
		private string m_sExceptionWSDiscoveryTitle=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sExceptionWSDiscoveryTitle']/@value")]
		public string sExceptionWSDiscoveryTitle {
			get { 
				if( m_sExceptionWSDiscoveryTitle == null){
					return s_sExceptionWSDiscoveryTitle;
				}
				return m_sExceptionWSDiscoveryTitle; 
			}
			set { 
				if( value != m_sExceptionWSDiscoveryTitle){
					m_sExceptionWSDiscoveryTitle = value;
					NotifyPropertyChanged("sExceptionWSDiscoveryTitle");
				}
			}  
		}
	


		private const string s_sErrorDevInfoNull = @"Error was during device configuration reading. Please refresh devices list";
		private string m_sErrorDevInfoNull=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorDevInfoNull']/@value")]
		public string sErrorDevInfoNull {
			get { 
				if( m_sErrorDevInfoNull == null){
					return s_sErrorDevInfoNull;
				}
				return m_sErrorDevInfoNull; 
			}
			set { 
				if( value != m_sErrorDevInfoNull){
					m_sErrorDevInfoNull = value;
					NotifyPropertyChanged("sErrorDevInfoNull");
				}
			}  
		}
	


		private const string s_sErrorDeviceName = @"none";
		private string m_sErrorDeviceName=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorDeviceName']/@value")]
		public string sErrorDeviceName {
			get { 
				if( m_sErrorDeviceName == null){
					return s_sErrorDeviceName;
				}
				return m_sErrorDeviceName; 
			}
			set { 
				if( value != m_sErrorDeviceName){
					m_sErrorDeviceName = value;
					NotifyPropertyChanged("sErrorDeviceName");
				}
			}  
		}
	


		private const string s_sErrorDeviceFirmware = @"none";
		private string m_sErrorDeviceFirmware=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorDeviceFirmware']/@value")]
		public string sErrorDeviceFirmware {
			get { 
				if( m_sErrorDeviceFirmware == null){
					return s_sErrorDeviceFirmware;
				}
				return m_sErrorDeviceFirmware; 
			}
			set { 
				if( value != m_sErrorDeviceFirmware){
					m_sErrorDeviceFirmware = value;
					NotifyPropertyChanged("sErrorDeviceFirmware");
				}
			}  
		}
	


		private const string s_sErrorSaveVideoStreaming = @"Error was during saving video streaming settings. Please refresh device.";
		private string m_sErrorSaveVideoStreaming=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorSaveVideoStreaming']/@value")]
		public string sErrorSaveVideoStreaming {
			get { 
				if( m_sErrorSaveVideoStreaming == null){
					return s_sErrorSaveVideoStreaming;
				}
				return m_sErrorSaveVideoStreaming; 
			}
			set { 
				if( value != m_sErrorSaveVideoStreaming){
					m_sErrorSaveVideoStreaming = value;
					NotifyPropertyChanged("sErrorSaveVideoStreaming");
				}
			}  
		}
	


		private const string s_sErrorSaveNetworkSettings = @"Error was during saving network settings. Please refresh device.";
		private string m_sErrorSaveNetworkSettings=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorSaveNetworkSettings']/@value")]
		public string sErrorSaveNetworkSettings {
			get { 
				if( m_sErrorSaveNetworkSettings == null){
					return s_sErrorSaveNetworkSettings;
				}
				return m_sErrorSaveNetworkSettings; 
			}
			set { 
				if( value != m_sErrorSaveNetworkSettings){
					m_sErrorSaveNetworkSettings = value;
					NotifyPropertyChanged("sErrorSaveNetworkSettings");
				}
			}  
		}
	


		private const string s_sErrorSaveDeviceNameSettings = @"Error was during saving device name. Please refresh device.";
		private string m_sErrorSaveDeviceNameSettings=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorSaveDeviceNameSettings']/@value")]
		public string sErrorSaveDeviceNameSettings {
			get { 
				if( m_sErrorSaveDeviceNameSettings == null){
					return s_sErrorSaveDeviceNameSettings;
				}
				return m_sErrorSaveDeviceNameSettings; 
			}
			set { 
				if( value != m_sErrorSaveDeviceNameSettings){
					m_sErrorSaveDeviceNameSettings = value;
					NotifyPropertyChanged("sErrorSaveDeviceNameSettings");
				}
			}  
		}
	


		private const string s_sErrorVlc = @"Media stream error";
		private string m_sErrorVlc=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorVlc']/@value")]
		public string sErrorVlc {
			get { 
				if( m_sErrorVlc == null){
					return s_sErrorVlc;
				}
				return m_sErrorVlc; 
			}
			set { 
				if( value != m_sErrorVlc){
					m_sErrorVlc = value;
					NotifyPropertyChanged("sErrorVlc");
				}
			}  
		}
	


		private const string s_sErrorVlcPlayer = @"Cann't play media stream.";
		private string m_sErrorVlcPlayer=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorVlcPlayer']/@value")]
		public string sErrorVlcPlayer {
			get { 
				if( m_sErrorVlcPlayer == null){
					return s_sErrorVlcPlayer;
				}
				return m_sErrorVlcPlayer; 
			}
			set { 
				if( value != m_sErrorVlcPlayer){
					m_sErrorVlcPlayer = value;
					NotifyPropertyChanged("sErrorVlcPlayer");
				}
			}  
		}
	


		private const string s_sErrorVlcMediaUriIsEmpty = @"Stream uri is emtpy";
		private string m_sErrorVlcMediaUriIsEmpty=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorVlcMediaUriIsEmpty']/@value")]
		public string sErrorVlcMediaUriIsEmpty {
			get { 
				if( m_sErrorVlcMediaUriIsEmpty == null){
					return s_sErrorVlcMediaUriIsEmpty;
				}
				return m_sErrorVlcMediaUriIsEmpty; 
			}
			set { 
				if( value != m_sErrorVlcMediaUriIsEmpty){
					m_sErrorVlcMediaUriIsEmpty = value;
					NotifyPropertyChanged("sErrorVlcMediaUriIsEmpty");
				}
			}  
		}
	


		private const string s_sErrorVlcMediaUriIsBad = @"Stream uri is unknown";
		private string m_sErrorVlcMediaUriIsBad=null;
		[XPath(@"/localized-strings/module[@name='ExceptionStrings' and @namespace='nvc.controls']/descendant::string[@name='sErrorVlcMediaUriIsBad']/@value")]
		public string sErrorVlcMediaUriIsBad {
			get { 
				if( m_sErrorVlcMediaUriIsBad == null){
					return s_sErrorVlcMediaUriIsBad;
				}
				return m_sErrorVlcMediaUriIsBad; 
			}
			set { 
				if( value != m_sErrorVlcMediaUriIsBad){
					m_sErrorVlcMediaUriIsBad = value;
					NotifyPropertyChanged("sErrorVlcMediaUriIsBad");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class DeviceControlStrings: LocalizedStringsBase<DeviceControlStrings>{
		


		private const string s_title = @"Device configuration";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='DeviceControlStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_languageEng = @"English";
		private string m_languageEng=null;
		[XPath(@"/localized-strings/module[@name='DeviceControlStrings' and @namespace='nvc.controls']/descendant::string[@name='languageEng']/@value")]
		public string languageEng {
			get { 
				if( m_languageEng == null){
					return s_languageEng;
				}
				return m_languageEng; 
			}
			set { 
				if( value != m_languageEng){
					m_languageEng = value;
					NotifyPropertyChanged("languageEng");
				}
			}  
		}
	


		private const string s_languageRus = @"Русский";
		private string m_languageRus=null;
		[XPath(@"/localized-strings/module[@name='DeviceControlStrings' and @namespace='nvc.controls']/descendant::string[@name='languageRus']/@value")]
		public string languageRus {
			get { 
				if( m_languageRus == null){
					return s_languageRus;
				}
				return m_languageRus; 
			}
			set { 
				if( value != m_languageRus){
					m_languageRus = value;
					NotifyPropertyChanged("languageRus");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class DevicesListControlStrings: LocalizedStringsBase<DevicesListControlStrings>{
		


		private const string s_title = @"Network";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='DevicesListControlStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_refresh = @"Refresh";
		private string m_refresh=null;
		[XPath(@"/localized-strings/module[@name='DevicesListControlStrings' and @namespace='nvc.controls']/descendant::string[@name='refresh']/@value")]
		public string refresh {
			get { 
				if( m_refresh == null){
					return s_refresh;
				}
				return m_refresh; 
			}
			set { 
				if( value != m_refresh){
					m_refresh = value;
					NotifyPropertyChanged("refresh");
				}
			}  
		}
	


		private const string s_columnName = @"Name";
		private string m_columnName=null;
		[XPath(@"/localized-strings/module[@name='DevicesListControlStrings' and @namespace='nvc.controls']/descendant::string[@name='columnName']/@value")]
		public string columnName {
			get { 
				if( m_columnName == null){
					return s_columnName;
				}
				return m_columnName; 
			}
			set { 
				if( value != m_columnName){
					m_columnName = value;
					NotifyPropertyChanged("columnName");
				}
			}  
		}
	


		private const string s_columnIPadress = @"IP Adress";
		private string m_columnIPadress=null;
		[XPath(@"/localized-strings/module[@name='DevicesListControlStrings' and @namespace='nvc.controls']/descendant::string[@name='columnIPadress']/@value")]
		public string columnIPadress {
			get { 
				if( m_columnIPadress == null){
					return s_columnIPadress;
				}
				return m_columnIPadress; 
			}
			set { 
				if( value != m_columnIPadress){
					m_columnIPadress = value;
					NotifyPropertyChanged("columnIPadress");
				}
			}  
		}
	


		private const string s_columnType = @"Firmware";
		private string m_columnType=null;
		[XPath(@"/localized-strings/module[@name='DevicesListControlStrings' and @namespace='nvc.controls']/descendant::string[@name='columnType']/@value")]
		public string columnType {
			get { 
				if( m_columnType == null){
					return s_columnType;
				}
				return m_columnType; 
			}
			set { 
				if( value != m_columnType){
					m_columnType = value;
					NotifyPropertyChanged("columnType");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class PropertyNetworkSettingsStrings: LocalizedStringsBase<PropertyNetworkSettingsStrings>{
		


		private const string s_title = @"Network settings";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='PropertyNetworkSettingsStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_dhcp = @"DHCP";
		private string m_dhcp=null;
		[XPath(@"/localized-strings/module[@name='PropertyNetworkSettingsStrings' and @namespace='nvc.controls']/descendant::string[@name='dhcp']/@value")]
		public string dhcp {
			get { 
				if( m_dhcp == null){
					return s_dhcp;
				}
				return m_dhcp; 
			}
			set { 
				if( value != m_dhcp){
					m_dhcp = value;
					NotifyPropertyChanged("dhcp");
				}
			}  
		}
	


		private const string s_ipAddr = @"Device IP address ";
		private string m_ipAddr=null;
		[XPath(@"/localized-strings/module[@name='PropertyNetworkSettingsStrings' and @namespace='nvc.controls']/descendant::string[@name='ipAddr']/@value")]
		public string ipAddr {
			get { 
				if( m_ipAddr == null){
					return s_ipAddr;
				}
				return m_ipAddr; 
			}
			set { 
				if( value != m_ipAddr){
					m_ipAddr = value;
					NotifyPropertyChanged("ipAddr");
				}
			}  
		}
	


		private const string s_subnetMask = @"Subnet mask";
		private string m_subnetMask=null;
		[XPath(@"/localized-strings/module[@name='PropertyNetworkSettingsStrings' and @namespace='nvc.controls']/descendant::string[@name='subnetMask']/@value")]
		public string subnetMask {
			get { 
				if( m_subnetMask == null){
					return s_subnetMask;
				}
				return m_subnetMask; 
			}
			set { 
				if( value != m_subnetMask){
					m_subnetMask = value;
					NotifyPropertyChanged("subnetMask");
				}
			}  
		}
	


		private const string s_gateAddr = @"Gateway address";
		private string m_gateAddr=null;
		[XPath(@"/localized-strings/module[@name='PropertyNetworkSettingsStrings' and @namespace='nvc.controls']/descendant::string[@name='gateAddr']/@value")]
		public string gateAddr {
			get { 
				if( m_gateAddr == null){
					return s_gateAddr;
				}
				return m_gateAddr; 
			}
			set { 
				if( value != m_gateAddr){
					m_gateAddr = value;
					NotifyPropertyChanged("gateAddr");
				}
			}  
		}
	


		private const string s_dnsAddr = @"DNS address";
		private string m_dnsAddr=null;
		[XPath(@"/localized-strings/module[@name='PropertyNetworkSettingsStrings' and @namespace='nvc.controls']/descendant::string[@name='dnsAddr']/@value")]
		public string dnsAddr {
			get { 
				if( m_dnsAddr == null){
					return s_dnsAddr;
				}
				return m_dnsAddr; 
			}
			set { 
				if( value != m_dnsAddr){
					m_dnsAddr = value;
					NotifyPropertyChanged("dnsAddr");
				}
			}  
		}
	


		private const string s_macAddr = @"MAC address";
		private string m_macAddr=null;
		[XPath(@"/localized-strings/module[@name='PropertyNetworkSettingsStrings' and @namespace='nvc.controls']/descendant::string[@name='macAddr']/@value")]
		public string macAddr {
			get { 
				if( m_macAddr == null){
					return s_macAddr;
				}
				return m_macAddr; 
			}
			set { 
				if( value != m_macAddr){
					m_macAddr = value;
					NotifyPropertyChanged("macAddr");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class PropertyDigitalIOStrings: LocalizedStringsBase<PropertyDigitalIOStrings>{
		


		private const string s_title = @"Digital IO";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_inputName = @"Name";
		private string m_inputName=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='inputName']/@value")]
		public string inputName {
			get { 
				if( m_inputName == null){
					return s_inputName;
				}
				return m_inputName; 
			}
			set { 
				if( value != m_inputName){
					m_inputName = value;
					NotifyPropertyChanged("inputName");
				}
			}  
		}
	


		private const string s_inputNormalStatus = @"Normal status";
		private string m_inputNormalStatus=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='inputNormalStatus']/@value")]
		public string inputNormalStatus {
			get { 
				if( m_inputNormalStatus == null){
					return s_inputNormalStatus;
				}
				return m_inputNormalStatus; 
			}
			set { 
				if( value != m_inputNormalStatus){
					m_inputNormalStatus = value;
					NotifyPropertyChanged("inputNormalStatus");
				}
			}  
		}
	


		private const string s_inputCurrentStatus = @"Current status";
		private string m_inputCurrentStatus=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='inputCurrentStatus']/@value")]
		public string inputCurrentStatus {
			get { 
				if( m_inputCurrentStatus == null){
					return s_inputCurrentStatus;
				}
				return m_inputCurrentStatus; 
			}
			set { 
				if( value != m_inputCurrentStatus){
					m_inputCurrentStatus = value;
					NotifyPropertyChanged("inputCurrentStatus");
				}
			}  
		}
	


		private const string s_outputName = @"Name";
		private string m_outputName=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='outputName']/@value")]
		public string outputName {
			get { 
				if( m_outputName == null){
					return s_outputName;
				}
				return m_outputName; 
			}
			set { 
				if( value != m_outputName){
					m_outputName = value;
					NotifyPropertyChanged("outputName");
				}
			}  
		}
	


		private const string s_outputIdleStatus = @"Idle status";
		private string m_outputIdleStatus=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='outputIdleStatus']/@value")]
		public string outputIdleStatus {
			get { 
				if( m_outputIdleStatus == null){
					return s_outputIdleStatus;
				}
				return m_outputIdleStatus; 
			}
			set { 
				if( value != m_outputIdleStatus){
					m_outputIdleStatus = value;
					NotifyPropertyChanged("outputIdleStatus");
				}
			}  
		}
	


		private const string s_outputCurrentStatus = @"Current status";
		private string m_outputCurrentStatus=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='outputCurrentStatus']/@value")]
		public string outputCurrentStatus {
			get { 
				if( m_outputCurrentStatus == null){
					return s_outputCurrentStatus;
				}
				return m_outputCurrentStatus; 
			}
			set { 
				if( value != m_outputCurrentStatus){
					m_outputCurrentStatus = value;
					NotifyPropertyChanged("outputCurrentStatus");
				}
			}  
		}
	


		private const string s_inputs = @"Digital inputs";
		private string m_inputs=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='inputs']/@value")]
		public string inputs {
			get { 
				if( m_inputs == null){
					return s_inputs;
				}
				return m_inputs; 
			}
			set { 
				if( value != m_inputs){
					m_inputs = value;
					NotifyPropertyChanged("inputs");
				}
			}  
		}
	


		private const string s_outputs = @"Digital outputs (relays)";
		private string m_outputs=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='outputs']/@value")]
		public string outputs {
			get { 
				if( m_outputs == null){
					return s_outputs;
				}
				return m_outputs; 
			}
			set { 
				if( value != m_outputs){
					m_outputs = value;
					NotifyPropertyChanged("outputs");
				}
			}  
		}
	


		private const string s_eventAction = @"Event action";
		private string m_eventAction=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='eventAction']/@value")]
		public string eventAction {
			get { 
				if( m_eventAction == null){
					return s_eventAction;
				}
				return m_eventAction; 
			}
			set { 
				if( value != m_eventAction){
					m_eventAction = value;
					NotifyPropertyChanged("eventAction");
				}
			}  
		}
	


		private const string s_eventSendONVIFmessage = @"Send ONVIF message";
		private string m_eventSendONVIFmessage=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='eventSendONVIFmessage']/@value")]
		public string eventSendONVIFmessage {
			get { 
				if( m_eventSendONVIFmessage == null){
					return s_eventSendONVIFmessage;
				}
				return m_eventSendONVIFmessage; 
			}
			set { 
				if( value != m_eventSendONVIFmessage){
					m_eventSendONVIFmessage = value;
					NotifyPropertyChanged("eventSendONVIFmessage");
				}
			}  
		}
	


		private const string s_triggerRelay = @"Trigger relay";
		private string m_triggerRelay=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='triggerRelay']/@value")]
		public string triggerRelay {
			get { 
				if( m_triggerRelay == null){
					return s_triggerRelay;
				}
				return m_triggerRelay; 
			}
			set { 
				if( value != m_triggerRelay){
					m_triggerRelay = value;
					NotifyPropertyChanged("triggerRelay");
				}
			}  
		}
	


		private const string s_recordChannel = @"Record channel";
		private string m_recordChannel=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='recordChannel']/@value")]
		public string recordChannel {
			get { 
				if( m_recordChannel == null){
					return s_recordChannel;
				}
				return m_recordChannel; 
			}
			set { 
				if( value != m_recordChannel){
					m_recordChannel = value;
					NotifyPropertyChanged("recordChannel");
				}
			}  
		}
	


		private const string s_switchAnalogue = @"Switch analogue video on";
		private string m_switchAnalogue=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='switchAnalogue']/@value")]
		public string switchAnalogue {
			get { 
				if( m_switchAnalogue == null){
					return s_switchAnalogue;
				}
				return m_switchAnalogue; 
			}
			set { 
				if( value != m_switchAnalogue){
					m_switchAnalogue = value;
					NotifyPropertyChanged("switchAnalogue");
				}
			}  
		}
	


		private const string s_buttonTriggerRelay = @"Trigger relay";
		private string m_buttonTriggerRelay=null;
		[XPath(@"/localized-strings/module[@name='PropertyDigitalIOStrings' and @namespace='nvc.controls']/descendant::string[@name='buttonTriggerRelay']/@value")]
		public string buttonTriggerRelay {
			get { 
				if( m_buttonTriggerRelay == null){
					return s_buttonTriggerRelay;
				}
				return m_buttonTriggerRelay; 
			}
			set { 
				if( value != m_buttonTriggerRelay){
					m_buttonTriggerRelay = value;
					NotifyPropertyChanged("buttonTriggerRelay");
				}
			}  
		}
	
	}

}
	
			
namespace nvc.controls {
	public partial class PropertyVideoStreamingStrings: LocalizedStringsBase<PropertyVideoStreamingStrings>{
		


		private const string s_title = @"Video streaming";
		private string m_title=null;
		[XPath(@"/localized-strings/module[@name='PropertyVideoStreamingStrings' and @namespace='nvc.controls']/descendant::string[@name='title']/@value")]
		public string title {
			get { 
				if( m_title == null){
					return s_title;
				}
				return m_title; 
			}
			set { 
				if( value != m_title){
					m_title = value;
					NotifyPropertyChanged("title");
				}
			}  
		}
	


		private const string s_resolution = @"Resolution, pixels";
		private string m_resolution=null;
		[XPath(@"/localized-strings/module[@name='PropertyVideoStreamingStrings' and @namespace='nvc.controls']/descendant::string[@name='resolution']/@value")]
		public string resolution {
			get { 
				if( m_resolution == null){
					return s_resolution;
				}
				return m_resolution; 
			}
			set { 
				if( value != m_resolution){
					m_resolution = value;
					NotifyPropertyChanged("resolution");
				}
			}  
		}
	


		private const string s_frameRate = @"Frame rate, fps";
		private string m_frameRate=null;
		[XPath(@"/localized-strings/module[@name='PropertyVideoStreamingStrings' and @namespace='nvc.controls']/descendant::string[@name='frameRate']/@value")]
		public string frameRate {
			get { 
				if( m_frameRate == null){
					return s_frameRate;
				}
				return m_frameRate; 
			}
			set { 
				if( value != m_frameRate){
					m_frameRate = value;
					NotifyPropertyChanged("frameRate");
				}
			}  
		}
	


		private const string s_encoder = @"Encoder";
		private string m_encoder=null;
		[XPath(@"/localized-strings/module[@name='PropertyVideoStreamingStrings' and @namespace='nvc.controls']/descendant::string[@name='encoder']/@value")]
		public string encoder {
			get { 
				if( m_encoder == null){
					return s_encoder;
				}
				return m_encoder; 
			}
			set { 
				if( value != m_encoder){
					m_encoder = value;
					NotifyPropertyChanged("encoder");
				}
			}  
		}
	


		private const string s_bitrate = @"Target bitrate, kbps";
		private string m_bitrate=null;
		[XPath(@"/localized-strings/module[@name='PropertyVideoStreamingStrings' and @namespace='nvc.controls']/descendant::string[@name='bitrate']/@value")]
		public string bitrate {
			get { 
				if( m_bitrate == null){
					return s_bitrate;
				}
				return m_bitrate; 
			}
			set { 
				if( value != m_bitrate){
					m_bitrate = value;
					NotifyPropertyChanged("bitrate");
				}
			}  
		}
	


		private const string s_prioriy = @"Priority";
		private string m_prioriy=null;
		[XPath(@"/localized-strings/module[@name='PropertyVideoStreamingStrings' and @namespace='nvc.controls']/descendant::string[@name='prioriy']/@value")]
		public string prioriy {
			get { 
				if( m_prioriy == null){
					return s_prioriy;
				}
				return m_prioriy; 
			}
			set { 
				if( value != m_prioriy){
					m_prioriy = value;
					NotifyPropertyChanged("prioriy");
				}
			}  
		}
	
	}

}
	
			
namespace nvc {
	public partial class Constants: LocalizedStringsBase<Constants>{
		


		private const string s_sCommonAppOn = @"On";
		private string m_sCommonAppOn=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sCommonAppOn']/@value")]
		public string sCommonAppOn {
			get { 
				if( m_sCommonAppOn == null){
					return s_sCommonAppOn;
				}
				return m_sCommonAppOn; 
			}
			set { 
				if( value != m_sCommonAppOn){
					m_sCommonAppOn = value;
					NotifyPropertyChanged("sCommonAppOn");
				}
			}  
		}
	


		private const string s_sCommonAppOff = @"Off";
		private string m_sCommonAppOff=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sCommonAppOff']/@value")]
		public string sCommonAppOff {
			get { 
				if( m_sCommonAppOff == null){
					return s_sCommonAppOff;
				}
				return m_sCommonAppOff; 
			}
			set { 
				if( value != m_sCommonAppOff){
					m_sCommonAppOff = value;
					NotifyPropertyChanged("sCommonAppOff");
				}
			}  
		}
	


		private const string s_sCommonAppYes = @"Yes";
		private string m_sCommonAppYes=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sCommonAppYes']/@value")]
		public string sCommonAppYes {
			get { 
				if( m_sCommonAppYes == null){
					return s_sCommonAppYes;
				}
				return m_sCommonAppYes; 
			}
			set { 
				if( value != m_sCommonAppYes){
					m_sCommonAppYes = value;
					NotifyPropertyChanged("sCommonAppYes");
				}
			}  
		}
	


		private const string s_sCommonAppNo = @"No";
		private string m_sCommonAppNo=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sCommonAppNo']/@value")]
		public string sCommonAppNo {
			get { 
				if( m_sCommonAppNo == null){
					return s_sCommonAppNo;
				}
				return m_sCommonAppNo; 
			}
			set { 
				if( value != m_sCommonAppNo){
					m_sCommonAppNo = value;
					NotifyPropertyChanged("sCommonAppNo");
				}
			}  
		}
	


		private const string s_sVideoPriorityStreaming = @"Streaming";
		private string m_sVideoPriorityStreaming=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sVideoPriorityStreaming']/@value")]
		public string sVideoPriorityStreaming {
			get { 
				if( m_sVideoPriorityStreaming == null){
					return s_sVideoPriorityStreaming;
				}
				return m_sVideoPriorityStreaming; 
			}
			set { 
				if( value != m_sVideoPriorityStreaming){
					m_sVideoPriorityStreaming = value;
					NotifyPropertyChanged("sVideoPriorityStreaming");
				}
			}  
		}
	


		private const string s_sVideoPriorityAnalytics = @"Analytics";
		private string m_sVideoPriorityAnalytics=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sVideoPriorityAnalytics']/@value")]
		public string sVideoPriorityAnalytics {
			get { 
				if( m_sVideoPriorityAnalytics == null){
					return s_sVideoPriorityAnalytics;
				}
				return m_sVideoPriorityAnalytics; 
			}
			set { 
				if( value != m_sVideoPriorityAnalytics){
					m_sVideoPriorityAnalytics = value;
					NotifyPropertyChanged("sVideoPriorityAnalytics");
				}
			}  
		}
	


		private const string s_sLoadingData = @"Loading data ...";
		private string m_sLoadingData=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sLoadingData']/@value")]
		public string sLoadingData {
			get { 
				if( m_sLoadingData == null){
					return s_sLoadingData;
				}
				return m_sLoadingData; 
			}
			set { 
				if( value != m_sLoadingData){
					m_sLoadingData = value;
					NotifyPropertyChanged("sLoadingData");
				}
			}  
		}
	


		private const string s_sApplicationName = @"ONVIF Device Manager";
		private string m_sApplicationName=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sApplicationName']/@value")]
		public string sApplicationName {
			get { 
				if( m_sApplicationName == null){
					return s_sApplicationName;
				}
				return m_sApplicationName; 
			}
			set { 
				if( value != m_sApplicationName){
					m_sApplicationName = value;
					NotifyPropertyChanged("sApplicationName");
				}
			}  
		}
	


		private const string s_constLinkButtonIdentificationAndStatus = @"Identification and status";
		private string m_constLinkButtonIdentificationAndStatus=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonIdentificationAndStatus']/@value")]
		public string constLinkButtonIdentificationAndStatus {
			get { 
				if( m_constLinkButtonIdentificationAndStatus == null){
					return s_constLinkButtonIdentificationAndStatus;
				}
				return m_constLinkButtonIdentificationAndStatus; 
			}
			set { 
				if( value != m_constLinkButtonIdentificationAndStatus){
					m_constLinkButtonIdentificationAndStatus = value;
					NotifyPropertyChanged("constLinkButtonIdentificationAndStatus");
				}
			}  
		}
	


		private const string s_constLinkButtonNetworkSettings = @"Network settings";
		private string m_constLinkButtonNetworkSettings=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonNetworkSettings']/@value")]
		public string constLinkButtonNetworkSettings {
			get { 
				if( m_constLinkButtonNetworkSettings == null){
					return s_constLinkButtonNetworkSettings;
				}
				return m_constLinkButtonNetworkSettings; 
			}
			set { 
				if( value != m_constLinkButtonNetworkSettings){
					m_constLinkButtonNetworkSettings = value;
					NotifyPropertyChanged("constLinkButtonNetworkSettings");
				}
			}  
		}
	


		private const string s_constLinkButtonDigitalIO = @"Digital IO";
		private string m_constLinkButtonDigitalIO=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonDigitalIO']/@value")]
		public string constLinkButtonDigitalIO {
			get { 
				if( m_constLinkButtonDigitalIO == null){
					return s_constLinkButtonDigitalIO;
				}
				return m_constLinkButtonDigitalIO; 
			}
			set { 
				if( value != m_constLinkButtonDigitalIO){
					m_constLinkButtonDigitalIO = value;
					NotifyPropertyChanged("constLinkButtonDigitalIO");
				}
			}  
		}
	


		private const string s_constLinkButtonMaintenance = @"Maintenance";
		private string m_constLinkButtonMaintenance=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonMaintenance']/@value")]
		public string constLinkButtonMaintenance {
			get { 
				if( m_constLinkButtonMaintenance == null){
					return s_constLinkButtonMaintenance;
				}
				return m_constLinkButtonMaintenance; 
			}
			set { 
				if( value != m_constLinkButtonMaintenance){
					m_constLinkButtonMaintenance = value;
					NotifyPropertyChanged("constLinkButtonMaintenance");
				}
			}  
		}
	


		private const string s_constLinkButtonLiveVideo = @"Live video";
		private string m_constLinkButtonLiveVideo=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonLiveVideo']/@value")]
		public string constLinkButtonLiveVideo {
			get { 
				if( m_constLinkButtonLiveVideo == null){
					return s_constLinkButtonLiveVideo;
				}
				return m_constLinkButtonLiveVideo; 
			}
			set { 
				if( value != m_constLinkButtonLiveVideo){
					m_constLinkButtonLiveVideo = value;
					NotifyPropertyChanged("constLinkButtonLiveVideo");
				}
			}  
		}
	


		private const string s_constLinkButtonEvents = @"Events";
		private string m_constLinkButtonEvents=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonEvents']/@value")]
		public string constLinkButtonEvents {
			get { 
				if( m_constLinkButtonEvents == null){
					return s_constLinkButtonEvents;
				}
				return m_constLinkButtonEvents; 
			}
			set { 
				if( value != m_constLinkButtonEvents){
					m_constLinkButtonEvents = value;
					NotifyPropertyChanged("constLinkButtonEvents");
				}
			}  
		}
	


		private const string s_constLinkButtonDepthCalibration = @"Depth calibration";
		private string m_constLinkButtonDepthCalibration=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonDepthCalibration']/@value")]
		public string constLinkButtonDepthCalibration {
			get { 
				if( m_constLinkButtonDepthCalibration == null){
					return s_constLinkButtonDepthCalibration;
				}
				return m_constLinkButtonDepthCalibration; 
			}
			set { 
				if( value != m_constLinkButtonDepthCalibration){
					m_constLinkButtonDepthCalibration = value;
					NotifyPropertyChanged("constLinkButtonDepthCalibration");
				}
			}  
		}
	


		private const string s_constLinkButtonVideoStreaming = @"Video streaming";
		private string m_constLinkButtonVideoStreaming=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonVideoStreaming']/@value")]
		public string constLinkButtonVideoStreaming {
			get { 
				if( m_constLinkButtonVideoStreaming == null){
					return s_constLinkButtonVideoStreaming;
				}
				return m_constLinkButtonVideoStreaming; 
			}
			set { 
				if( value != m_constLinkButtonVideoStreaming){
					m_constLinkButtonVideoStreaming = value;
					NotifyPropertyChanged("constLinkButtonVideoStreaming");
				}
			}  
		}
	


		private const string s_constLinkButtonDisplayAnnotation = @"Display  annotation";
		private string m_constLinkButtonDisplayAnnotation=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonDisplayAnnotation']/@value")]
		public string constLinkButtonDisplayAnnotation {
			get { 
				if( m_constLinkButtonDisplayAnnotation == null){
					return s_constLinkButtonDisplayAnnotation;
				}
				return m_constLinkButtonDisplayAnnotation; 
			}
			set { 
				if( value != m_constLinkButtonDisplayAnnotation){
					m_constLinkButtonDisplayAnnotation = value;
					NotifyPropertyChanged("constLinkButtonDisplayAnnotation");
				}
			}  
		}
	


		private const string s_constLinkButtonTamperingDetectors = @"Tampering detectors";
		private string m_constLinkButtonTamperingDetectors=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonTamperingDetectors']/@value")]
		public string constLinkButtonTamperingDetectors {
			get { 
				if( m_constLinkButtonTamperingDetectors == null){
					return s_constLinkButtonTamperingDetectors;
				}
				return m_constLinkButtonTamperingDetectors; 
			}
			set { 
				if( value != m_constLinkButtonTamperingDetectors){
					m_constLinkButtonTamperingDetectors = value;
					NotifyPropertyChanged("constLinkButtonTamperingDetectors");
				}
			}  
		}
	


		private const string s_constLinkButtonObjectTracker = @"Object tracker";
		private string m_constLinkButtonObjectTracker=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonObjectTracker']/@value")]
		public string constLinkButtonObjectTracker {
			get { 
				if( m_constLinkButtonObjectTracker == null){
					return s_constLinkButtonObjectTracker;
				}
				return m_constLinkButtonObjectTracker; 
			}
			set { 
				if( value != m_constLinkButtonObjectTracker){
					m_constLinkButtonObjectTracker = value;
					NotifyPropertyChanged("constLinkButtonObjectTracker");
				}
			}  
		}
	


		private const string s_constLinkButtonRuleEngine = @"Rule engine";
		private string m_constLinkButtonRuleEngine=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonRuleEngine']/@value")]
		public string constLinkButtonRuleEngine {
			get { 
				if( m_constLinkButtonRuleEngine == null){
					return s_constLinkButtonRuleEngine;
				}
				return m_constLinkButtonRuleEngine; 
			}
			set { 
				if( value != m_constLinkButtonRuleEngine){
					m_constLinkButtonRuleEngine = value;
					NotifyPropertyChanged("constLinkButtonRuleEngine");
				}
			}  
		}
	


		private const string s_constLinkButtonAntishaker = @"Antishaker";
		private string m_constLinkButtonAntishaker=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonAntishaker']/@value")]
		public string constLinkButtonAntishaker {
			get { 
				if( m_constLinkButtonAntishaker == null){
					return s_constLinkButtonAntishaker;
				}
				return m_constLinkButtonAntishaker; 
			}
			set { 
				if( value != m_constLinkButtonAntishaker){
					m_constLinkButtonAntishaker = value;
					NotifyPropertyChanged("constLinkButtonAntishaker");
				}
			}  
		}
	


		private const string s_constLinkButtonRotation = @"Rotation";
		private string m_constLinkButtonRotation=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='constLinkButtonRotation']/@value")]
		public string constLinkButtonRotation {
			get { 
				if( m_constLinkButtonRotation == null){
					return s_constLinkButtonRotation;
				}
				return m_constLinkButtonRotation; 
			}
			set { 
				if( value != m_constLinkButtonRotation){
					m_constLinkButtonRotation = value;
					NotifyPropertyChanged("constLinkButtonRotation");
				}
			}  
		}
	


		private const string s_sButtonSave = @"Save";
		private string m_sButtonSave=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sButtonSave']/@value")]
		public string sButtonSave {
			get { 
				if( m_sButtonSave == null){
					return s_sButtonSave;
				}
				return m_sButtonSave; 
			}
			set { 
				if( value != m_sButtonSave){
					m_sButtonSave = value;
					NotifyPropertyChanged("sButtonSave");
				}
			}  
		}
	


		private const string s_sButtonCancel = @"Cancel";
		private string m_sButtonCancel=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sButtonCancel']/@value")]
		public string sButtonCancel {
			get { 
				if( m_sButtonCancel == null){
					return s_sButtonCancel;
				}
				return m_sButtonCancel; 
			}
			set { 
				if( value != m_sButtonCancel){
					m_sButtonCancel = value;
					NotifyPropertyChanged("sButtonCancel");
				}
			}  
		}
	


		private const string s_sButtonClose = @"Close";
		private string m_sButtonClose=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sButtonClose']/@value")]
		public string sButtonClose {
			get { 
				if( m_sButtonClose == null){
					return s_sButtonClose;
				}
				return m_sButtonClose; 
			}
			set { 
				if( value != m_sButtonClose){
					m_sButtonClose = value;
					NotifyPropertyChanged("sButtonClose");
				}
			}  
		}
	


		private const string s_sNotifierTextTitle = @"No connected devices.";
		private string m_sNotifierTextTitle=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sNotifierTextTitle']/@value")]
		public string sNotifierTextTitle {
			get { 
				if( m_sNotifierTextTitle == null){
					return s_sNotifierTextTitle;
				}
				return m_sNotifierTextTitle; 
			}
			set { 
				if( value != m_sNotifierTextTitle){
					m_sNotifierTextTitle = value;
					NotifyPropertyChanged("sNotifierTextTitle");
				}
			}  
		}
	


		private const string s_sNotifierText = @"Please check the device is properly connected, or contact support.";
		private string m_sNotifierText=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sNotifierText']/@value")]
		public string sNotifierText {
			get { 
				if( m_sNotifierText == null){
					return s_sNotifierText;
				}
				return m_sNotifierText; 
			}
			set { 
				if( value != m_sNotifierText){
					m_sNotifierText = value;
					NotifyPropertyChanged("sNotifierText");
				}
			}  
		}
	


		private const string s_sNotifierTextContacts = @"";
		private string m_sNotifierTextContacts=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sNotifierTextContacts']/@value")]
		public string sNotifierTextContacts {
			get { 
				if( m_sNotifierTextContacts == null){
					return s_sNotifierTextContacts;
				}
				return m_sNotifierTextContacts; 
			}
			set { 
				if( value != m_sNotifierTextContacts){
					m_sNotifierTextContacts = value;
					NotifyPropertyChanged("sNotifierTextContacts");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusTitle = @"Device identification and status";
		private string m_sPropertyDeviceInfoStatusTitle=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusTitle']/@value")]
		public string sPropertyDeviceInfoStatusTitle {
			get { 
				if( m_sPropertyDeviceInfoStatusTitle == null){
					return s_sPropertyDeviceInfoStatusTitle;
				}
				return m_sPropertyDeviceInfoStatusTitle; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusTitle){
					m_sPropertyDeviceInfoStatusTitle = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusTitle");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusLableName = @"Name";
		private string m_sPropertyDeviceInfoStatusLableName=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusLableName']/@value")]
		public string sPropertyDeviceInfoStatusLableName {
			get { 
				if( m_sPropertyDeviceInfoStatusLableName == null){
					return s_sPropertyDeviceInfoStatusLableName;
				}
				return m_sPropertyDeviceInfoStatusLableName; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusLableName){
					m_sPropertyDeviceInfoStatusLableName = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusLableName");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusLableDeviceID = @"Device ID";
		private string m_sPropertyDeviceInfoStatusLableDeviceID=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusLableDeviceID']/@value")]
		public string sPropertyDeviceInfoStatusLableDeviceID {
			get { 
				if( m_sPropertyDeviceInfoStatusLableDeviceID == null){
					return s_sPropertyDeviceInfoStatusLableDeviceID;
				}
				return m_sPropertyDeviceInfoStatusLableDeviceID; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusLableDeviceID){
					m_sPropertyDeviceInfoStatusLableDeviceID = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusLableDeviceID");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusLableFirmware = @"Firmware";
		private string m_sPropertyDeviceInfoStatusLableFirmware=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusLableFirmware']/@value")]
		public string sPropertyDeviceInfoStatusLableFirmware {
			get { 
				if( m_sPropertyDeviceInfoStatusLableFirmware == null){
					return s_sPropertyDeviceInfoStatusLableFirmware;
				}
				return m_sPropertyDeviceInfoStatusLableFirmware; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusLableFirmware){
					m_sPropertyDeviceInfoStatusLableFirmware = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusLableFirmware");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusLableHardware = @"Hardware";
		private string m_sPropertyDeviceInfoStatusLableHardware=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusLableHardware']/@value")]
		public string sPropertyDeviceInfoStatusLableHardware {
			get { 
				if( m_sPropertyDeviceInfoStatusLableHardware == null){
					return s_sPropertyDeviceInfoStatusLableHardware;
				}
				return m_sPropertyDeviceInfoStatusLableHardware; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusLableHardware){
					m_sPropertyDeviceInfoStatusLableHardware = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusLableHardware");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusLableVersion = @"Version";
		private string m_sPropertyDeviceInfoStatusLableVersion=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusLableVersion']/@value")]
		public string sPropertyDeviceInfoStatusLableVersion {
			get { 
				if( m_sPropertyDeviceInfoStatusLableVersion == null){
					return s_sPropertyDeviceInfoStatusLableVersion;
				}
				return m_sPropertyDeviceInfoStatusLableVersion; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusLableVersion){
					m_sPropertyDeviceInfoStatusLableVersion = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusLableVersion");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusLableIPAddr = @"IP address";
		private string m_sPropertyDeviceInfoStatusLableIPAddr=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusLableIPAddr']/@value")]
		public string sPropertyDeviceInfoStatusLableIPAddr {
			get { 
				if( m_sPropertyDeviceInfoStatusLableIPAddr == null){
					return s_sPropertyDeviceInfoStatusLableIPAddr;
				}
				return m_sPropertyDeviceInfoStatusLableIPAddr; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusLableIPAddr){
					m_sPropertyDeviceInfoStatusLableIPAddr = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusLableIPAddr");
				}
			}  
		}
	


		private const string s_sPropertyDeviceInfoStatusLableMACAddr = @"MAC address";
		private string m_sPropertyDeviceInfoStatusLableMACAddr=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyDeviceInfoStatusLableMACAddr']/@value")]
		public string sPropertyDeviceInfoStatusLableMACAddr {
			get { 
				if( m_sPropertyDeviceInfoStatusLableMACAddr == null){
					return s_sPropertyDeviceInfoStatusLableMACAddr;
				}
				return m_sPropertyDeviceInfoStatusLableMACAddr; 
			}
			set { 
				if( value != m_sPropertyDeviceInfoStatusLableMACAddr){
					m_sPropertyDeviceInfoStatusLableMACAddr = value;
					NotifyPropertyChanged("sPropertyDeviceInfoStatusLableMACAddr");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceTitle = @"Maintenance";
		private string m_sPropertyMaintenanceTitle=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceTitle']/@value")]
		public string sPropertyMaintenanceTitle {
			get { 
				if( m_sPropertyMaintenanceTitle == null){
					return s_sPropertyMaintenanceTitle;
				}
				return m_sPropertyMaintenanceTitle; 
			}
			set { 
				if( value != m_sPropertyMaintenanceTitle){
					m_sPropertyMaintenanceTitle = value;
					NotifyPropertyChanged("sPropertyMaintenanceTitle");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceConfiguration = @"Configuration";
		private string m_sPropertyMaintenanceConfiguration=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceConfiguration']/@value")]
		public string sPropertyMaintenanceConfiguration {
			get { 
				if( m_sPropertyMaintenanceConfiguration == null){
					return s_sPropertyMaintenanceConfiguration;
				}
				return m_sPropertyMaintenanceConfiguration; 
			}
			set { 
				if( value != m_sPropertyMaintenanceConfiguration){
					m_sPropertyMaintenanceConfiguration = value;
					NotifyPropertyChanged("sPropertyMaintenanceConfiguration");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceBTNBackup = @"Backup";
		private string m_sPropertyMaintenanceBTNBackup=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceBTNBackup']/@value")]
		public string sPropertyMaintenanceBTNBackup {
			get { 
				if( m_sPropertyMaintenanceBTNBackup == null){
					return s_sPropertyMaintenanceBTNBackup;
				}
				return m_sPropertyMaintenanceBTNBackup; 
			}
			set { 
				if( value != m_sPropertyMaintenanceBTNBackup){
					m_sPropertyMaintenanceBTNBackup = value;
					NotifyPropertyChanged("sPropertyMaintenanceBTNBackup");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceBTNRestore = @"Restore";
		private string m_sPropertyMaintenanceBTNRestore=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceBTNRestore']/@value")]
		public string sPropertyMaintenanceBTNRestore {
			get { 
				if( m_sPropertyMaintenanceBTNRestore == null){
					return s_sPropertyMaintenanceBTNRestore;
				}
				return m_sPropertyMaintenanceBTNRestore; 
			}
			set { 
				if( value != m_sPropertyMaintenanceBTNRestore){
					m_sPropertyMaintenanceBTNRestore = value;
					NotifyPropertyChanged("sPropertyMaintenanceBTNRestore");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceFactoryReset = @"Factory reset";
		private string m_sPropertyMaintenanceFactoryReset=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceFactoryReset']/@value")]
		public string sPropertyMaintenanceFactoryReset {
			get { 
				if( m_sPropertyMaintenanceFactoryReset == null){
					return s_sPropertyMaintenanceFactoryReset;
				}
				return m_sPropertyMaintenanceFactoryReset; 
			}
			set { 
				if( value != m_sPropertyMaintenanceFactoryReset){
					m_sPropertyMaintenanceFactoryReset = value;
					NotifyPropertyChanged("sPropertyMaintenanceFactoryReset");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceBTNSoftReset = @"Soft reset";
		private string m_sPropertyMaintenanceBTNSoftReset=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceBTNSoftReset']/@value")]
		public string sPropertyMaintenanceBTNSoftReset {
			get { 
				if( m_sPropertyMaintenanceBTNSoftReset == null){
					return s_sPropertyMaintenanceBTNSoftReset;
				}
				return m_sPropertyMaintenanceBTNSoftReset; 
			}
			set { 
				if( value != m_sPropertyMaintenanceBTNSoftReset){
					m_sPropertyMaintenanceBTNSoftReset = value;
					NotifyPropertyChanged("sPropertyMaintenanceBTNSoftReset");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceBTNHardReset = @"Hard reset";
		private string m_sPropertyMaintenanceBTNHardReset=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceBTNHardReset']/@value")]
		public string sPropertyMaintenanceBTNHardReset {
			get { 
				if( m_sPropertyMaintenanceBTNHardReset == null){
					return s_sPropertyMaintenanceBTNHardReset;
				}
				return m_sPropertyMaintenanceBTNHardReset; 
			}
			set { 
				if( value != m_sPropertyMaintenanceBTNHardReset){
					m_sPropertyMaintenanceBTNHardReset = value;
					NotifyPropertyChanged("sPropertyMaintenanceBTNHardReset");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceDiagnostics = @"Diagnostics and support";
		private string m_sPropertyMaintenanceDiagnostics=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceDiagnostics']/@value")]
		public string sPropertyMaintenanceDiagnostics {
			get { 
				if( m_sPropertyMaintenanceDiagnostics == null){
					return s_sPropertyMaintenanceDiagnostics;
				}
				return m_sPropertyMaintenanceDiagnostics; 
			}
			set { 
				if( value != m_sPropertyMaintenanceDiagnostics){
					m_sPropertyMaintenanceDiagnostics = value;
					NotifyPropertyChanged("sPropertyMaintenanceDiagnostics");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceBTNDownloadDump = @"Download Dump";
		private string m_sPropertyMaintenanceBTNDownloadDump=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceBTNDownloadDump']/@value")]
		public string sPropertyMaintenanceBTNDownloadDump {
			get { 
				if( m_sPropertyMaintenanceBTNDownloadDump == null){
					return s_sPropertyMaintenanceBTNDownloadDump;
				}
				return m_sPropertyMaintenanceBTNDownloadDump; 
			}
			set { 
				if( value != m_sPropertyMaintenanceBTNDownloadDump){
					m_sPropertyMaintenanceBTNDownloadDump = value;
					NotifyPropertyChanged("sPropertyMaintenanceBTNDownloadDump");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceFirmwareVer = @"Current firmware version";
		private string m_sPropertyMaintenanceFirmwareVer=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceFirmwareVer']/@value")]
		public string sPropertyMaintenanceFirmwareVer {
			get { 
				if( m_sPropertyMaintenanceFirmwareVer == null){
					return s_sPropertyMaintenanceFirmwareVer;
				}
				return m_sPropertyMaintenanceFirmwareVer; 
			}
			set { 
				if( value != m_sPropertyMaintenanceFirmwareVer){
					m_sPropertyMaintenanceFirmwareVer = value;
					NotifyPropertyChanged("sPropertyMaintenanceFirmwareVer");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceUpgrateFirmware = @"Upgrade firmware";
		private string m_sPropertyMaintenanceUpgrateFirmware=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceUpgrateFirmware']/@value")]
		public string sPropertyMaintenanceUpgrateFirmware {
			get { 
				if( m_sPropertyMaintenanceUpgrateFirmware == null){
					return s_sPropertyMaintenanceUpgrateFirmware;
				}
				return m_sPropertyMaintenanceUpgrateFirmware; 
			}
			set { 
				if( value != m_sPropertyMaintenanceUpgrateFirmware){
					m_sPropertyMaintenanceUpgrateFirmware = value;
					NotifyPropertyChanged("sPropertyMaintenanceUpgrateFirmware");
				}
			}  
		}
	


		private const string s_sPropertyMaintenanceBTNUpgrate = @"Upgrate";
		private string m_sPropertyMaintenanceBTNUpgrate=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyMaintenanceBTNUpgrate']/@value")]
		public string sPropertyMaintenanceBTNUpgrate {
			get { 
				if( m_sPropertyMaintenanceBTNUpgrate == null){
					return s_sPropertyMaintenanceBTNUpgrate;
				}
				return m_sPropertyMaintenanceBTNUpgrate; 
			}
			set { 
				if( value != m_sPropertyMaintenanceBTNUpgrate){
					m_sPropertyMaintenanceBTNUpgrate = value;
					NotifyPropertyChanged("sPropertyMaintenanceBTNUpgrate");
				}
			}  
		}
	


		private const string s_sPropertyLiveVideoTitle = @"Live video";
		private string m_sPropertyLiveVideoTitle=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyLiveVideoTitle']/@value")]
		public string sPropertyLiveVideoTitle {
			get { 
				if( m_sPropertyLiveVideoTitle == null){
					return s_sPropertyLiveVideoTitle;
				}
				return m_sPropertyLiveVideoTitle; 
			}
			set { 
				if( value != m_sPropertyLiveVideoTitle){
					m_sPropertyLiveVideoTitle = value;
					NotifyPropertyChanged("sPropertyLiveVideoTitle");
				}
			}  
		}
	


		private const string s_sPropertyObjectTrackerTitle = @"Object tracker";
		private string m_sPropertyObjectTrackerTitle=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyObjectTrackerTitle']/@value")]
		public string sPropertyObjectTrackerTitle {
			get { 
				if( m_sPropertyObjectTrackerTitle == null){
					return s_sPropertyObjectTrackerTitle;
				}
				return m_sPropertyObjectTrackerTitle; 
			}
			set { 
				if( value != m_sPropertyObjectTrackerTitle){
					m_sPropertyObjectTrackerTitle = value;
					NotifyPropertyChanged("sPropertyObjectTrackerTitle");
				}
			}  
		}
	


		private const string s_sPropertyObjectTrackerContrast = @"Contrast sensitivity";
		private string m_sPropertyObjectTrackerContrast=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyObjectTrackerContrast']/@value")]
		public string sPropertyObjectTrackerContrast {
			get { 
				if( m_sPropertyObjectTrackerContrast == null){
					return s_sPropertyObjectTrackerContrast;
				}
				return m_sPropertyObjectTrackerContrast; 
			}
			set { 
				if( value != m_sPropertyObjectTrackerContrast){
					m_sPropertyObjectTrackerContrast = value;
					NotifyPropertyChanged("sPropertyObjectTrackerContrast");
				}
			}  
		}
	


		private const string s_sPropertyObjectTrackerAreaMin = @"Object area min, m*m";
		private string m_sPropertyObjectTrackerAreaMin=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyObjectTrackerAreaMin']/@value")]
		public string sPropertyObjectTrackerAreaMin {
			get { 
				if( m_sPropertyObjectTrackerAreaMin == null){
					return s_sPropertyObjectTrackerAreaMin;
				}
				return m_sPropertyObjectTrackerAreaMin; 
			}
			set { 
				if( value != m_sPropertyObjectTrackerAreaMin){
					m_sPropertyObjectTrackerAreaMin = value;
					NotifyPropertyChanged("sPropertyObjectTrackerAreaMin");
				}
			}  
		}
	


		private const string s_sPropertyObjectTrackerAreaMax = @"Object area max, m*m";
		private string m_sPropertyObjectTrackerAreaMax=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyObjectTrackerAreaMax']/@value")]
		public string sPropertyObjectTrackerAreaMax {
			get { 
				if( m_sPropertyObjectTrackerAreaMax == null){
					return s_sPropertyObjectTrackerAreaMax;
				}
				return m_sPropertyObjectTrackerAreaMax; 
			}
			set { 
				if( value != m_sPropertyObjectTrackerAreaMax){
					m_sPropertyObjectTrackerAreaMax = value;
					NotifyPropertyChanged("sPropertyObjectTrackerAreaMax");
				}
			}  
		}
	


		private const string s_sPropertyObjectTrackerSpeedMax = @"Speed max, m/s";
		private string m_sPropertyObjectTrackerSpeedMax=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyObjectTrackerSpeedMax']/@value")]
		public string sPropertyObjectTrackerSpeedMax {
			get { 
				if( m_sPropertyObjectTrackerSpeedMax == null){
					return s_sPropertyObjectTrackerSpeedMax;
				}
				return m_sPropertyObjectTrackerSpeedMax; 
			}
			set { 
				if( value != m_sPropertyObjectTrackerSpeedMax){
					m_sPropertyObjectTrackerSpeedMax = value;
					NotifyPropertyChanged("sPropertyObjectTrackerSpeedMax");
				}
			}  
		}
	


		private const string s_sPropertyObjectTrackerStabilization = @"Stabilization time, ms";
		private string m_sPropertyObjectTrackerStabilization=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyObjectTrackerStabilization']/@value")]
		public string sPropertyObjectTrackerStabilization {
			get { 
				if( m_sPropertyObjectTrackerStabilization == null){
					return s_sPropertyObjectTrackerStabilization;
				}
				return m_sPropertyObjectTrackerStabilization; 
			}
			set { 
				if( value != m_sPropertyObjectTrackerStabilization){
					m_sPropertyObjectTrackerStabilization = value;
					NotifyPropertyChanged("sPropertyObjectTrackerStabilization");
				}
			}  
		}
	


		private const string s_sPropertyEventsTitle = @"Events";
		private string m_sPropertyEventsTitle=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyEventsTitle']/@value")]
		public string sPropertyEventsTitle {
			get { 
				if( m_sPropertyEventsTitle == null){
					return s_sPropertyEventsTitle;
				}
				return m_sPropertyEventsTitle; 
			}
			set { 
				if( value != m_sPropertyEventsTitle){
					m_sPropertyEventsTitle = value;
					NotifyPropertyChanged("sPropertyEventsTitle");
				}
			}  
		}
	


		private const string s_sPropertyEventsColumnID = @"Rule ID";
		private string m_sPropertyEventsColumnID=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyEventsColumnID']/@value")]
		public string sPropertyEventsColumnID {
			get { 
				if( m_sPropertyEventsColumnID == null){
					return s_sPropertyEventsColumnID;
				}
				return m_sPropertyEventsColumnID; 
			}
			set { 
				if( value != m_sPropertyEventsColumnID){
					m_sPropertyEventsColumnID = value;
					NotifyPropertyChanged("sPropertyEventsColumnID");
				}
			}  
		}
	


		private const string s_sPropertyEventsColumnDate = @"Date/Time";
		private string m_sPropertyEventsColumnDate=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyEventsColumnDate']/@value")]
		public string sPropertyEventsColumnDate {
			get { 
				if( m_sPropertyEventsColumnDate == null){
					return s_sPropertyEventsColumnDate;
				}
				return m_sPropertyEventsColumnDate; 
			}
			set { 
				if( value != m_sPropertyEventsColumnDate){
					m_sPropertyEventsColumnDate = value;
					NotifyPropertyChanged("sPropertyEventsColumnDate");
				}
			}  
		}
	


		private const string s_sPropertyEventsColumnType = @"Type";
		private string m_sPropertyEventsColumnType=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyEventsColumnType']/@value")]
		public string sPropertyEventsColumnType {
			get { 
				if( m_sPropertyEventsColumnType == null){
					return s_sPropertyEventsColumnType;
				}
				return m_sPropertyEventsColumnType; 
			}
			set { 
				if( value != m_sPropertyEventsColumnType){
					m_sPropertyEventsColumnType = value;
					NotifyPropertyChanged("sPropertyEventsColumnType");
				}
			}  
		}
	


		private const string s_sPropertyEventsColumnDetails = @"Details";
		private string m_sPropertyEventsColumnDetails=null;
		[XPath(@"/localized-strings/module[@name='Constants' and @namespace='nvc']/descendant::string[@name='sPropertyEventsColumnDetails']/@value")]
		public string sPropertyEventsColumnDetails {
			get { 
				if( m_sPropertyEventsColumnDetails == null){
					return s_sPropertyEventsColumnDetails;
				}
				return m_sPropertyEventsColumnDetails; 
			}
			set { 
				if( value != m_sPropertyEventsColumnDetails){
					m_sPropertyEventsColumnDetails = value;
					NotifyPropertyChanged("sPropertyEventsColumnDetails");
				}
			}  
		}
	
	}

}
	