<ResourceDictionary 
	xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
	xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
	xmlns:my="clr-namespace:odm.controls"
	xmlns:s="clr-namespace:System;assembly=mscorlib">

	<!--<Style TargetType="{x:Type Window}">
		<Setter Property="OverridesDefaultStyle"  Value="true"/>
		<Setter Property="BorderThickness"  Value="20"/>
		<Setter Property="Background" Value="Black"/>
	</Style>-->
			<!--Buttons start-->
	<Style x:Key="LinkButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <TextBlock TextDecorations="Underline"><InlineUIContainer>
                    		<ContentPresenter />
                    	</InlineUIContainer></TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Foreground" Value="Blue" />
        <Setter Property="Cursor" Value="Hand" />
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="Red" />
            </Trigger>
        </Style.Triggers>
    </Style>
	<!--<Style x:Key="{x:Type Button}" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
		<Setter Property="MinWidth" Value="75"/>		
	</Style>-->
	<Style x:Key="CommonButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <!--<Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="1"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="DarkGray" />
                <Setter Property="Background" Value="LightBlue" />
            </Trigger>
        </Style.Triggers>-->
    </Style>
	<Style x:Key="UpButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="0">
                        <Path Name="path" Fill="Silver" Data="M 5,10 L 15,10 L 10,5 L 5,10" 
                                                      Width="10" Height="8" 
                                                      Stretch="Fill"/>
                            
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="path" Property="Fill" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	<Style x:Key="DownButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                            CornerRadius="2" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="0">
                        <Path Name="path" Fill="Silver" Data="M 5,5 L 10,10 L 15,5 L 5,5" 
                                                      Width="10" Height="8" 
                                                      Stretch="Fill"/>

                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="path" Property="Fill" Value="Black"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
	<Style x:Key="RoundButtonStyle" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Background="{TemplateBinding Background}"
                		CornerRadius="50" 
                		BorderBrush="{TemplateBinding BorderBrush}" 
                		BorderThickness="{TemplateBinding BorderThickness}" 
                		Padding="0">
                		<VisualStateManager.VisualStateGroups>
                			<VisualStateGroup x:Name="CommonStates">
                				<VisualState x:Name="Normal"/>
                				<VisualState x:Name="MouseOver">
                					<Storyboard>
                						<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(SolidColorBrush.Color)" Storyboard.TargetName="ellipse">
                							<EasingColorKeyFrame KeyTime="0" Value="#FF4B4B4B"/>
                						</ColorAnimationUsingKeyFrames>
                					</Storyboard>
                				</VisualState>
                				<VisualState x:Name="Pressed"/>
                				<VisualState x:Name="Disabled"/>
                			</VisualStateGroup>
                		</VisualStateManager.VisualStateGroups>
                		<Ellipse x:Name="ellipse" Fill="Silver" Margin="5" Height="8" Width="8"/>
                	</Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--Buttons end-->
<!--CheckBoxes start-->
	<Style x:Key="FlatCheckBoxStyle" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <CheckBox Background="White"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
<!--CheckBoxes end-->
<!--ComboBoxes start-->
	<Style x:Key="FlatComboBoxStyle" TargetType="{x:Type ComboBox}" BasedOn="{StaticResource {x:Type ComboBox}}">
        <!--<Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>-->
    </Style>
    <!--ComboBoxes end-->
<!-- TextBoxes start-->
	<Style TargetType="{x:Type TextBox}" >
		<Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="BorderBrush" Value="Black"/>
		<Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type TextBoxBase}">
					<Border x:Name="Bd" CornerRadius="2" BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}">
                        <ScrollViewer x:Name="PART_ContentHost" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Panel.Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
						<Trigger Property="IsReadOnly" Value="True">
							<Setter Property="Panel.Background" TargetName="Bd" Value="{DynamicResource {x:Static SystemColors.ControlBrushKey}}"/>
							<Setter Property="TextElement.Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
						</Trigger>
					</ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
<!-- TextBoxes end-->
<!-- Grid start-->
	<Style x:Key="FlatGridStyle" TargetType="{x:Type DataGrid}" BasedOn="{StaticResource {x:Type DataGrid}}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="HorizontalGridLinesBrush" Value="LightGray" />
        <Setter Property="VerticalGridLinesBrush" Value="LightGray" />
        <Setter Property="SelectionMode" Value="Single" />
        <Setter Property="SelectionUnit" Value="FullRow" />
    </Style>
    <Style x:Key="FlatGridHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="White"/>
        <Setter Property="BorderThickness" Value="0,0,1,1"/>
        <Setter Property="BorderBrush" Value="Black"/>
    </Style>
<!-- start-->
<!-- end-->

<!--================================================================
	Common.CustomDialogWindow.CloseButton
================================================================-->

	<ControlTemplate x:Key="Common.CustomDialogWindow.CloseButtonTemplate" TargetType="{x:Type Button}">
		<Viewbox Stretch="Uniform">
			<Canvas Width="32" Height="32" IsHitTestVisible="True">
				<!--<Ellipse Width="32" Height="32" Canvas.Left="0" Canvas.Top="0" Fill="#FFFFFFFF"  Stroke="#FF434343" StrokeThickness="3" x:Name="frame"/>-->
				<Rectangle Width="32" Height="32" Canvas.Left="0" Canvas.Top="0" Fill="#FFFFFFFF"  Stroke="#FF434343" StrokeThickness="1" x:Name="frame" RadiusX="8" RadiusY="8"/>
				<Path Canvas.Left="9" Canvas.Top="9" Width="14" Height="14" Fill="#FF9B433B" Stretch="Fill" Stroke="{x:Null}" Data="M320,-40 L360,-80 400,-40 440,-80 480,-40 440,0 480,40 440,80 400,40 360,80 320,40 360,0" x:Name="isotype">
					<Path.BitmapEffect>
						<DropShadowBitmapEffect ShadowDepth="2" Opacity="0.7" Softness="0"/>
					</Path.BitmapEffect>
				</Path>
				<!--
				<Path Width="14" Height="14" Canvas.Left="9" Canvas.Top="9" Fill="#FF9B433B" Stretch="Fill" Stroke="{x:Null}" StrokeThickness="0" Data="M199.5,-80.5 L239.5,-120.5 319.5,-40.5 399.5,-120.5 439.5,-80.5 359.5,-0.5 439.5,79.5 399.5,119.50042 319.5,39.5 239.5,119.5 199.5,79.5 279.5,-0.49983345 z" x:Name="isotype" />
				-->
			</Canvas>
		</Viewbox>
		<ControlTemplate.Triggers>
			<Trigger Property="IsPressed" Value="True">
				<Setter Property="Stroke" TargetName="frame" Value="#FF000000"/>
				<Setter Property="BitmapEffect" TargetName="isotype" Value="{x:Null}"/>
			</Trigger>
			<MultiTrigger>
				<MultiTrigger.Conditions>
					<Condition Property="IsMouseOver" Value="True"/>
					<Condition Property="IsEnabled" Value="True"/>
					<Condition Property="IsPressed" Value="False"/>
				</MultiTrigger.Conditions>
			</MultiTrigger>
			<Trigger Property="IsEnabled" Value="False">
				<Setter Property="Fill" TargetName="isotype" Value="#FF808080"/>
				<Setter Property="Stroke" TargetName="frame" Value="#FF808080"/>
			</Trigger>
		</ControlTemplate.Triggers>
	</ControlTemplate>

	<Style  x:Key="Common.CustomDialogWindow.CloseButton" TargetType="{x:Type Button}">
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Template" Value="{StaticResource 'Common.CustomDialogWindow.CloseButtonTemplate'}" />
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="Height" Value="42"/>
	</Style>

<!--================================================================
	Common.CustomDialogWindow
================================================================-->

	<ControlTemplate x:Key="Common.CustomDialogWindowTemplate" TargetType="{x:Type my:CustomDialogWindow}">
		<Grid Margin="0,0,7,7" >
			<Border BorderBrush="#FF434343" CornerRadius="6" BorderThickness="1" Margin="0,13,0,0" Padding="10,20,10,10" Background="#FFFFFFFF">
				<ContentPresenter/>
			</Border>
			<Border Height="26" MinWidth="100" Margin="12,0,12,0" HorizontalAlignment="Stretch"  VerticalAlignment="Top" BorderBrush="#FF434343" CornerRadius="6" BorderThickness="1" my:CustomDialogWindow.IsNonClient="True">
				<Border.Background>
					<LinearGradientBrush EndPoint="0.5,1" StartPoint="0.5,0">
						<GradientStop Color="#FFCBCBCB" Offset="0" />
						<GradientStop Color="White" Offset="0.66" />
					</LinearGradientBrush>
				</Border.Background>
				<DockPanel>
					<!--<Button Height="16" Margin="0,0,4,0" Style="{StaticResource CommonDialog.CloseBtn}" Button.IsCancel="True" DockPanel.Dock="Right"/>-->
					<Button Height="16" Margin="0,0,4,0" Button.IsCancel="True" DockPanel.Dock="Right">
						<Path Width="8" Height="8" Fill="#FF9B433B" Stretch="Fill" Stroke="{x:Null}" Data="M320,-40 L360,-80 400,-40 440,-80 480,-40 440,0 480,40 440,80 400,40 360,80 320,40 360,0" x:Name="isotype">
							<Path.BitmapEffect>
								<DropShadowBitmapEffect ShadowDepth="2" Opacity="0.7" Softness="0"/>
							</Path.BitmapEffect>
						</Path>
					</Button>
					<Label Padding="5,0,5,0" VerticalContentAlignment="Center" HorizontalContentAlignment="Left" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Title}"/>
				</DockPanel>
			</Border>
		</Grid>
	</ControlTemplate>

	<Style  x:Key="Common.CustomDialogWindow" TargetType="{x:Type my:CustomDialogWindow}">
		<Setter Property="WindowStyle" Value="None"/>
		<Setter Property="AllowsTransparency" Value="True"/>
		<Setter Property="Background" Value="Transparent"/>
		<Setter Property="ShowInTaskbar" Value="False"/>
		<Setter Property="SnapsToDevicePixels" Value="true"/>
		<Setter Property="OverridesDefaultStyle" Value="true"/>
		<Setter Property="Template" Value="{StaticResource 'Common.CustomDialogWindowTemplate'}" />
		<Setter Property="BitmapEffect">
			<Setter.Value>
				<DropShadowBitmapEffect Opacity="0.6" ShadowDepth="7" Softness="0.36"/>
			</Setter.Value>
		</Setter>
		<Setter Property="ResizeMode" Value="NoResize" />
		<!--<Setter Property="SizeToContent" Value="WidthAndHeight"/>
		<Setter Property="Width" Value="Auto"/>
		<Setter Property="Height" Value="Auto"/>-->
	</Style>
	<Style x:Key="TamperingIndicator" TargetType="{x:Type CheckBox}">
		<Setter Property="Template">
			<Setter.Value>
				<ControlTemplate TargetType="{x:Type CheckBox}">
					<Grid>
						<VisualStateManager.VisualStateGroups>
							<VisualStateGroup x:Name="CheckStates">
								<VisualState x:Name="Checked">
									<Storyboard>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[1].(GradientStop.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FFFF7500"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[2].(GradientStop.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FFFDAF6D"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[3].(GradientStop.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FFFBE0C9"/>
										</ColorAnimationUsingKeyFrames>
										<ColorAnimationUsingKeyFrames Storyboard.TargetProperty="(Shape.Fill).(GradientBrush.GradientStops)[0].(GradientStop.Color)" Storyboard.TargetName="ellipse">
											<EasingColorKeyFrame KeyTime="0" Value="#FFFBEADC"/>
										</ColorAnimationUsingKeyFrames>
									</Storyboard>
								</VisualState>
								<VisualState x:Name="Unchecked"/>
								<VisualState x:Name="Indeterminate"/>
							</VisualStateGroup>
						</VisualStateManager.VisualStateGroups>
						<Ellipse x:Name="ellipse">
							<Ellipse.Fill>
								<RadialGradientBrush>
									<GradientStop Color="White" Offset="0.305"/>
									<GradientStop Color="#FF5E5E5E" Offset="1"/>
									<GradientStop Color="#FFCFCFCF" Offset="0.789"/>
									<GradientStop Color="#FFDEDEDE" Offset="0.663"/>
								</RadialGradientBrush>
							</Ellipse.Fill>
						</Ellipse>
						<ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content=""/>
					</Grid>
				</ControlTemplate>
			</Setter.Value>
		</Setter>
	</Style>
	
</ResourceDictionary>